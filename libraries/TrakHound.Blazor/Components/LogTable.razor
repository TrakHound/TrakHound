@using TrakHound.Logging

<div class="log-table">

    @if (!LogLines.IsNullOrEmpty())
    {
        <RadzenDataGrid Data="@CreateTableItems(LogLines)" TItem="TableItem" Density="Density.Compact" GridLines="DataGridGridLines.Vertical">
            <Columns>
                <RadzenDataGridColumn TItem="TableItem" Property="Level" Title="Level" Width="100px" Sortable="false" />
                <RadzenDataGridColumn TItem="TableItem" Property="Timestamp" Title="Timestamp" Width="250px" Sortable="false">
                    <Template Context="context">
                        @context.Timestamp.ToISO8601String()
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="TableItem" Property="Message" Title="Message" Sortable="false" />
            </Columns>
        </RadzenDataGrid>
    }

</div>

@code {

    class TableItem
    {
        public string Level { get; set; }
        public DateTime Timestamp { get; set; }
        public string Message { get; set; }
    }


    [Parameter]
    public IEnumerable<TrakHoundLogItem> LogLines { get; set; }


    private static IEnumerable<TableItem> CreateTableItems(IEnumerable<TrakHoundLogItem> logItems)
    {
        if (!logItems.IsNullOrEmpty())
        {
            var tableItems = new List<TableItem>();

            foreach (var logItem in logItems)
            {
                var tableItem = new TableItem();
                tableItem.Level = logItem.LogLevel.ToString();
                tableItem.Timestamp = logItem.Timestamp.ToLocalDateTime();
                tableItem.Message = logItem.Message;
                tableItems.Add(tableItem);
            }

            return tableItems;
        }

        return null;
    }

}
