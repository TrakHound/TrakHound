@inject IJSRuntime JsRuntime
@using Microsoft.JSInterop

@{
    var size = Size == Size.Small ? "small" : "";
}

<div id="@ElementId" class="text-area @size @Class">

    @if (AllowEditModal)
    {       
        <div class="d-none d-xl-block">
            <div class="form-group">

                @if (!string.IsNullOrEmpty(Title))
                {
                    <label class="title">
                        @Title
                        @if (!string.IsNullOrEmpty(SubTitle))
                        {
                            <span class="subtitle small">@SubTitle</span>                        
                        }
                    </label>  
                }

                @if (Enabled)
                {
                    <textarea id="@InputElementId" class="form-control form-control-sm"
                              rows="@Rows"
                              @bind-value="@Value"
                              @bind-value:event="oninput"
                              @onfocusout="FocusLost"
                              @onkeypress="(o) => ValueSubmitted(o)"
                              @ondrop="OnDrop"
                              ondragover="event.preventDefault();"
                              maxlength="@MaxLength"
                              autocomplete="off" spellcheck="@SpellCheck" placeholder="@PlaceHolder"></textarea>
                }
                else
                {
                    <textarea id="@InputElementId" class="form-control form-control-sm"
                              rows="@Rows"
                              @onkeypress="(o) => ValueSubmitted(o)"
                              maxlength="@MaxLength"
                              autocomplete="off" spellcheck="@SpellCheck" placeholder="@PlaceHolder" disabled>@Value</textarea>
                }

                @if (!string.IsNullOrEmpty(Message))
                {
                    <label class="message">@Message</label>
                }
            </div>
        </div>
        <div class="d-xl-none">
            @if (!modalVisible)
            {
                <div class="form-group">
                    <label class="title">@Title</label>
                    <textarea id="@InputElementId" class="form-control form-control-sm"
                              rows="@Rows"
                              @bind-value="@Value"
                              @bind-value:event="oninput"
                              @onfocusout="FocusLost"
                              @onclick="ValueClicked"
                              @onkeypress="(o) => ValueSubmitted(o)"
                              @ondrop="OnDrop"
                              ondragover="event.preventDefault();"
                              maxlength="@MaxLength"
                              autocomplete="off" spellcheck="@SpellCheck" placeholder="@PlaceHolder"></textarea>
                    @if (!string.IsNullOrEmpty(Message))
                    {
                        <label class="message">@Message</label>
                    }
                </div>
            }
            else
            {
                <Modal Visible="@modalVisible">
                    <HeaderContent>
                        <span class="title">@Title</span>
                    </HeaderContent>
                    <BodyContent>
                        <div class="px-4 py-2">
                            <textarea id="@modalTextElementId" class="form-control form-control-lg"
                                      rows="@Rows"
                                      @bind-value="@Value"
                                      @bind-value:event="oninput"
                                      @onfocusout="FocusLost"
                                      @onkeypress="(o) => ValueSubmitted(o)"
                                      @ondrop="OnDrop"
                                      ondragover="event.preventDefault();"
                                      maxlength="@MaxLength"
                                      autocomplete="off" spellcheck="@SpellCheck" placeholder="@PlaceHolder"></textarea>
                        </div>
                    </BodyContent>
                    <FooterContent>
                        <button class="btn btn-secondary" @onclick="CloseModal"><span class="icon fas fa-times"></span>Cancel</button>
                        <button class="btn btn-primary" @onclick="ModalValueSubmitted"><span class="icon fas fa-check"></span>Submit</button>
                    </FooterContent>
                </Modal>
            }
        </div> 
    }
    else
    {
        <div class="form-group">

            @if (!string.IsNullOrEmpty(Title))
            {
                <label class="title">
                    @Title
                    @if (!string.IsNullOrEmpty(SubTitle))
                    {
                        <span class="subtitle small">@SubTitle</span>                        
                    }
                </label>  
            }
            
            @if (Enabled)
            {
                <textarea id="@InputElementId" class="form-control form-control-sm"
                          rows="@Rows"
                          @bind-value="@Value"
                          @bind-value:event="oninput"
                          @onfocusout="FocusLost"
                          @onkeypress="(o) => ValueSubmitted(o)"
                          @ondrop="OnDrop"
                          ondragover="event.preventDefault();"
                          maxlength="@MaxLength"
                          autocomplete="off" spellcheck="@SpellCheck" placeholder="@PlaceHolder"></textarea>
            }
            else
            {
                <textarea id="@InputElementId" class="form-control form-control-sm"
                          rows="@Rows"
                          @bind-value="@Value"
                          @bind-value:event="oninput"
                          @onkeypress="(o) => ValueSubmitted(o)"
                          maxlength="@MaxLength"
                          autocomplete="off" spellcheck="@SpellCheck" placeholder="@PlaceHolder" disabled></textarea>
            }

            @if (!string.IsNullOrEmpty(Message))
            {
                <label class="message">@Message</label>
            }

        </div>
    }

</div>


@code {

    private readonly string modalTextElementId = Guid.NewGuid().ToString();
    private bool modalVisible = false;
    private string _value;
    private string previousValue;


    [Parameter]
    public bool Enabled { get; set; } = true;

    [Parameter]
    public bool AllowEditModal { get; set; } = false;

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string SubTitle { get; set; }

    [Parameter]
    public string Value
    {
        get => _value;
        set
        {
            if (value != previousValue)
            {
                _value = value;
                previousValue = _value;

                var val = _value;
                if (!string.IsNullOrEmpty(val))
                {
                    if (!string.IsNullOrEmpty(Prefix)) val = Prefix + val;
                    if (!string.IsNullOrEmpty(Suffix)) val = val + Suffix;
                }

                if (InputChangeType == InputChangeType.OnValueChange)
                {
                    ValueChanged.InvokeAsync(val);
                }
            }
        }
    }

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public EventCallback<string> Submitted { get; set; }

    [Parameter]
    public EventCallback<DragEventArgs> OnDrop { get; set; }

    [Parameter]
    public int Rows { get; set; } = 0;

    [Parameter]
    public int Cols { get; set; } = 0;

    [Parameter]
    public string Message { get; set; }

    [Parameter]
    public string PlaceHolder { get; set; }

    [Parameter]
    public string Prefix { get; set; }

    [Parameter]
    public string Suffix { get; set; }

    [Parameter]
    public string ElementId { get; set; }

    [Parameter]
    public string InputElementId { get; set; }

    [Parameter]
    public InputChangeType InputChangeType { get; set; }

    [Parameter]
    public string Class { get; set; }

    [Parameter]
    public string SpellCheck { get; set; } = "true";

    [Parameter]
    public long MaxLength { get; set; } = 100000000;

    [Parameter]
    public Size Size { get; set; }


    protected override async void OnAfterRender(bool firstRender)
    {
        if (modalVisible)
        {
            try
            {
                await JsRuntime.InvokeVoidAsync("JsFunctions.focusElement", modalTextElementId);
            }
            catch (Exception) { }
        }
    }


    private async void ValueClicked()
    {
        modalVisible = true;
        previousValue = Value;

        await InvokeAsync(StateHasChanged);
    }

    private async void ModalValueSubmitted()
    {
        modalVisible = false;
        previousValue = null;

        await InvokeAsync(StateHasChanged);
    }

    //private async void ValueUpdated(string val)
    //{
    //    if (val != null)
    //    {
    //        Value = val;

    //        var value = Value;
    //        if (!string.IsNullOrEmpty(value))
    //        {
    //            if (!string.IsNullOrEmpty(Prefix)) value = Prefix + value;
    //            if (!string.IsNullOrEmpty(Suffix)) value = value + Suffix;
    //        }

    //        if (InputChangeType == InputChangeType.OnValueChange)
    //        {
    //            await ValueChanged.InvokeAsync(value);
    //        }
    //    }
    //}

    //private async void ValueUpdated(ChangeEventArgs args)
    //{
    //    if (args != null)
    //    {
    //        Value = args.Value?.ToString();

    //        //var val = Value;
    //        //if (!string.IsNullOrEmpty(val))
    //        //{
    //        //    if (!string.IsNullOrEmpty(Prefix)) val = Prefix + val;
    //        //    if (!string.IsNullOrEmpty(Suffix)) val = val + Suffix;
    //        //}

    //        //if (InputChangeType == InputChangeType.OnValueChange)
    //        //{
    //        //    await ValueChanged.InvokeAsync(value);
    //        //}
    //    }
    //}

    private async void FocusLost(FocusEventArgs args)
    {
        if (InputChangeType == InputChangeType.OnLostFocus)
        {
            await ValueChanged.InvokeAsync(Value);
        }
    }

    private async void ValueSubmitted(KeyboardEventArgs args)
    {
        if (args.Key == "Enter" && !args.ShiftKey)
        {
            if (InputChangeType == InputChangeType.OnLostFocus)
            {
                await ValueChanged.InvokeAsync(Value);
            }

            await Submitted.InvokeAsync(Value);
        }

        //if ((args.Code == "Enter" || args.Code == "NumpadEnter") && !args.ShiftKey)
        //{
        //    if (InputChangeType == InputChangeType.OnLostFocus)
        //    {
        //        await ValueChanged.InvokeAsync(Value);
        //    }

        //    await Submitted.InvokeAsync(Value); 
        //}
    }

    private async void CloseModal()
    {
        modalVisible = false;
        Value = previousValue;

        await InvokeAsync(StateHasChanged);
    }

}
