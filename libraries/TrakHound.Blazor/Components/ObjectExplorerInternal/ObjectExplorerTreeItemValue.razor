@implements IDisposable
@rendermode InteractiveServer
@using TrakHound.Entities

@if (Object != null && ObjectExplorerService != null && value != null)
{
    var valueClass = recent ? "recent" : "";

    <div class="tree-item-value @valueClass">
        <span class="value" title="@value">@value</span>
    </div>
}

@code {

    private string value;
    private bool recent;


    [CascadingParameter(Name = "ObjectExplorerService")]
    public ObjectExplorerService ObjectExplorerService { get; set; }

    [Parameter]
    public ITrakHoundObjectEntity Object { get; set; }


    protected override void OnInitialized()
    {
        if (ObjectExplorerService != null)
        {
            ObjectExplorerService.ValueUpdated += ValueUpdated;

            value = ObjectExplorerService.GetValue(Object.Uuid);
            value = FormatValue(value);
        }
    }

    void IDisposable.Dispose()
    {
        try
        {
            if (ObjectExplorerService != null)
            {
                ObjectExplorerService.ValueUpdated -= ValueUpdated;
            }
        }
        catch { }
    }

    private async void ValueUpdated(object sender, string objectUuid)
    {
        if (Object != null && Object.Uuid == objectUuid)
        {
            var contentType = Object.ContentType.ConvertEnum<TrakHoundObjectContentType>();
            if (contentType != TrakHoundObjectContentType.Directory)
            {
                // Get Value
                var previousValue = value;
                value = ObjectExplorerService.GetValue(Object.Uuid);
                value = FormatValue(value);

                // Check if Recent Value
                var previousRecent = recent;
                recent = ObjectExplorerService.IsRecentValue(Object.Uuid);

                if (previousValue != value || previousRecent != recent)
                {
                    await InvokeAsync(StateHasChanged);
                }
            }
        }
    }

    private string FormatValue(string value)
    {
        if (Object != null && value != null)
        {
            switch (Object.ContentType.ConvertEnum<TrakHoundObjectContentType>())
            {
                case TrakHoundObjectContentType.Duration: return TimeSpan.FromTicks(value.ToLong() / 100).ToFormattedString(true);
                case TrakHoundObjectContentType.Timestamp: return value.ToLong().ToLocalDateTime().ToString();
            }
        }

        return value;
    }

}
