@rendermode InteractiveServer
@inject NavigationManager navigationManager
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using TrakHound.Entities

<div class="object-treeview">
    
    @if (ObjectExplorerService != null)
    {
        var treeItems = ObjectExplorerService.GetTreeItems();
        if (!treeItems.IsNullOrEmpty())
        {
            <CascadingValue Value="this">
                <table class="object-treeview-table" cellspacing="0" cellpadding="0">
                    <tbody>
                        <Virtualize TItem="ObjectExplorerTreeItemModel" Items="treeItems" Context="treeItem" OverscanCount="@OverscanCount">
                            <ObjectExplorerTreeItem TreeItem="@treeItem" />
                        </Virtualize>
                    </tbody>
                </table>
            </CascadingValue>
        }
    }

</div>

@code {

    private ThrottleEvent renderThrottle = new ThrottleEvent(500);


    [CascadingParameter(Name = "ObjectExplorerService")]
    public ObjectExplorerService ObjectExplorerService { get; set; }

    [Parameter]
    public int OverscanCount { get; set; } = 50;


    protected override void OnInitialized()
    {
        renderThrottle.Elapsed += RenderThrottleElapsed;
    }

    public async Task Render(bool force = false)
    {
        if (force)
        {
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            renderThrottle.Set();
        }
    }

    private async void RenderThrottleElapsed(object sender, EventArgs args)
    {
        await InvokeAsync(StateHasChanged);
    }


    private void QueryNamespace(string ns)
    {
        var resultQuery = $"select >> from [{ns}:/]";
        var queryLink = $"{ObjectExplorerService.BaseUrl}/entities/objects?query={resultQuery}";

        navigationManager.NavigateTo(queryLink);
    }

    private async void PasteNamespace(string ns)
    {
        var path = $"{ns}:/";
        if (await ObjectExplorerService.Paste(path))
        {
            ObjectExplorerService.AddNotification(NotificationType.Information, "Objects Pasted Successfuly", path);
            await InvokeAsync(StateHasChanged);
        }
    }

    private void AddNamespaceObject(string ns)
    {
        ObjectExplorerService.AddService.AddObject($"{ns}:/");
    }

}
