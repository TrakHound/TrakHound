@implements IDisposable
@rendermode InteractiveServer
@using TrakHound.Entities

@if (Object != null && ObjectExplorerService != null)
{
    var contentType = Object.ContentType.ConvertEnum<TrakHoundObjectContentType>();

    var selectedClass = selected ? "selected" : "";
    var folderClass = contentType == TrakHoundObjectContentType.Directory ? "folder" : "";

    var title = Object.Name;
    var subtitle = IsRoot ? Object.Path : null;
    var isExpanded = ObjectExplorerService.GetObjectExpanded(Object.Uuid);
    var icon = GetObjectIcon(contentType, isExpanded);

    var childCount = ObjectExplorerService.GetObjectChildCount(Object.Uuid);
    if (childCount > 0) title = $"{title} ({childCount})";

    <div class="tree-item-header-container @selectedClass @folderClass" @onclick="Select">

        @if (icon != null)
        {
            <div class="icon-container">
                <span class="icon @icon" title="@contentType.ToString()"></span>
            </div>
        }

        <div class="description-container">
            <span class="title" title="@Object.Path">@title <span class="subtitle">@subtitle</span></span>
        </div>

        <div class="value-container">
            <ObjectExplorerTreeItemValue Object="@Object" />
        </div>

    </div>
}

@code {

    private bool selected;


    [CascadingParameter(Name = "ObjectExplorerService")]
    public ObjectExplorerService ObjectExplorerService { get; set; }

    [Parameter]
    public ITrakHoundObjectEntity Object { get; set; }

    [Parameter]
    public bool IsRoot { get; set; }


    protected override void OnInitialized()
    {
        if (ObjectExplorerService != null)
        {
            ObjectExplorerService.SelectedObjectChanged += SelectedObjectUpdated;
        }
    }

    void IDisposable.Dispose()
    {
        try
        {
            if (ObjectExplorerService != null)
            {
                ObjectExplorerService.SelectedObjectChanged -= SelectedObjectUpdated;
            }
        }
        catch { }
    }


    private void Select()
    {
        ObjectExplorerService.SelectObject(Object.Uuid);
    }

    private async void SelectedObjectUpdated(object sender, ITrakHoundObjectEntity entity)
    {
        if (entity != null && Object != null)
        {
            if (entity.Uuid == Object.Uuid)
            {
                if (!selected)
                {
                    selected = true;
                    await InvokeAsync(StateHasChanged);
                }
            }
            else
            {
                if (selected)
                {
                    selected = false;
                    await InvokeAsync(StateHasChanged);
                }
            }
        }
    }

    private static string GetObjectIcon(TrakHoundObjectContentType contentType, bool isExpanded)
    {
        switch (contentType)
        {
            case TrakHoundObjectContentType.Directory:
                if (isExpanded) return "fa-duotone fa-folder-open";
                else return "fa-sharp fa-solid fa-folder";

            default:
                return TrakHoundObjectIcon.Get(contentType);
        }
    }

}
