@if (ObjectExplorerService != null)
{
    <Modal Class="delete-modal" Visible="@ObjectExplorerService.DeleteService.DeleteModalVisible">
        <HeaderContent>
            <span class="modal-header-icon fa-solid fa-sharp fa-memo"><span class="icon fa-solid fa-sharp fa-delete-right"></span></span>
            <span class="modal-header-title">Confirm Delete</span>
        </HeaderContent>
        <BodyContent>

            <span class="delete-modal-message">Confirm Deletion of Object(s)?</span>

            <div class="delete-modal-items">

                @if (!ObjectExplorerService.DeleteService.DeleteModalPaths.IsNullOrEmpty())
                {
                    foreach (var deletePath in ObjectExplorerService.DeleteService.DeleteModalPaths)
                    {
                        <p class="delete-modal-item">@deletePath</p>
                    }
                }

            </div>

        </BodyContent>
        <FooterContent>

            @if (!ObjectExplorerService.DeleteService.DeleteModalLoading)
            {
                <button class="btn btn-secondary" @onclick="ObjectExplorerService.DeleteService.ModalCancel"><span class="icon fa-solid fa-sharp fa-xmark"></span>Cancel</button>
                <button class="btn btn-danger" @onclick="ObjectExplorerService.DeleteService.ModalConfirm"><span class="icon fa-solid fa-sharp fa-trash"></span>Delete</button>
            }
            else
            {
                <button class="btn btn-danger disabled"><span class="icon fa-solid fa-sharp fa-loader"></span>Deleting..</button>
            }

        </FooterContent>
    </Modal>
}

@code {

    [CascadingParameter(Name = "ObjectExplorerService")]
    public ObjectExplorerService ObjectExplorerService { get; set; }


    protected override void OnInitialized()
    {
        if (ObjectExplorerService != null)
        {
            ObjectExplorerService.DeleteService.DeleteClicked += DeleteClicked;
        }
    }

    private async void DeleteClicked(object sender, EventArgs args)
    {
        await InvokeAsync(StateHasChanged);
    }

}
