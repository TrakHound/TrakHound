@using TrakHound.Entities;

@if (ObjectExplorerService != null && Object != null)
{
    var resultQuery = $"select > from [{Object.GetAbsolutePath()}] stop now span {selectedSpan} order desc take 100;";
    var queryLink = $"{ObjectExplorerService.BaseUrl}/entities/objects?query={resultQuery}";

    <div class="statistic-content">
        <div class="input-panel">
            <div class="input-panel-container">
                <div class="input-panel-buttons">

                    @if (!publishLoading)
                    {
                        <button class="btn btn-sm btn-primary btn-save" @onclick="Save"><span class="icon fa-solid fa-sharp fa-paper-plane"></span>Publish</button>
                    }
                    else
                    {
                        <button class="btn btn-sm btn-primary btn-save disabled"><span class="icon fa-solid fa-sharp fa-loader spin"></span>Publishing..</button>
                    }

                    @if (!loading)
                    {
                        <button class="btn btn-sm btn-light btn-refresh" @onclick="() => Load(true)"><span class="icon fa-solid fa-sharp fa-rotate"></span></button>
                    }
                    else
                    {
                        <button class="btn btn-sm btn-light btn-refresh disabled"><span class="icon fa-solid fa-sharp fa-loader spin"></span></button>
                    }

                </div>
                <div class="input-panel-time-range">
                    <RadzenDatePicker @bind-Value=@timeRangeStart Disabled="@publishLoading" ShowTime="true" ShowSeconds="true" HoursStep="1" MinutesStep="1" SecondsStep="1" DateFormat="G" HourFormat="12" Kind="DateTimeKind.Local" />
                </div>
                <div class="input-panel-time-range">
                    <RadzenDatePicker @bind-Value=@timeRangeEnd Disabled="@publishLoading" ShowTime="true" ShowSeconds="true" HoursStep="1" MinutesStep="1" SecondsStep="1" DateFormat="G" HourFormat="12" Kind="DateTimeKind.Local" />
                </div>
                <div class="input-panel-input">
                    <TextBox @bind-Value="@value" PlaceHolder="Value.." Enabled="@(!publishLoading)" />
                </div>
                <div class="input-panel-type">
                    <RadzenDropDown @bind-Value="@dataType" Data="@dataTypes" Disabled="@publishLoading" />
                </div>
            </div>
        </div>
        <div class="query-panel">
            <div class="query-panel-container">
                <span class="query-label">Query</span>
                <a href="@queryLink" class="btn btn-link btn-query">@resultQuery</a>
            </div>
        </div>
        <div class="range-panel">
            <div class="range-panel-container">
                <div class="range-panel-label">
                    <label>Time Range:</label>
                </div>
                <div class="range-panel-selection">
                    <RadzenDropDown TValue="long" Value="@selectedSpan" ValueProperty="Span" TextProperty="Display" Data="@spans" ValueChanged="SelectedSpanChanged" Disabled="@publishLoading" />
                </div>
            </div>
        </div>
        <div class="table-panel">

            @if (!loading)
            {
                <RadzenDataGrid Data="@tableItems"
                                TItem="TableItem"
                                Density="Density.Compact"
                                GridLines="DataGridGridLines.Vertical">
                    <Columns>
                        <RadzenDataGridColumn TItem="TableItem" Property="TimeRangeStart" Title="From" Width="170px" CssClass="time-range-start" />
                        <RadzenDataGridColumn TItem="TableItem" Property="TimeRangeEnd" Title="To" Width="170px" CssClass="time-range-end" />
                        <RadzenDataGridColumn TItem="TableItem" Property="Value" Title="Value" CssClass="value">
                            <Template Context="context">

                                @switch (context.DataType)
                                {
                                    case TrakHoundStatisticDataType.Byte:
                                        <span class="value-cell">@context.Value</span>
                                        break;

                                    case TrakHoundStatisticDataType.Int16:
                                        <span class="value-cell">@context.Value</span>
                                        break;

                                    case TrakHoundStatisticDataType.Int32:
                                        <span class="value-cell">@context.Value</span>
                                        break;

                                    case TrakHoundStatisticDataType.Int64:
                                        <span class="value-cell">@context.Value</span>
                                        break;

                                    case TrakHoundStatisticDataType.Float:
                                        <span class="value-cell">@context.Value.ToDouble().ToString("N6")</span>
                                        break;

                                    case TrakHoundStatisticDataType.Decimal:
                                        <span class="value-cell">@context.Value.ToDouble().ToString("N6")</span>
                                        break;

                                    case TrakHoundStatisticDataType.Duration:
                                        <span class="value-cell">@context.Value.ToTimeSpan().ToFormattedString()</span>
                                        break;
                                }

                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="TableItem" Property="DataType" Title="DataType" Width="120px" CssClass="data-type" />
                        <RadzenDataGridColumn TItem="TableItem" Property="TimestampLocal" Title="Timestamp" Width="150px" CssClass="timestamp" />
                        <RadzenDataGridColumn TItem="TableItem" CssClass="delete" Width="70px" Sortable="false">
                            <Template Context="context">
                                <button class="btn-link btn btn-sm" @onclick="() => DeleteClicked(context.Uuid)">Delete</button>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            }
            else
            {
                <Loading Message="Loading.." />
            }

        </div>
    </div>
}

@code {

    private IEnumerable<TableItem> tableItems;
    private IEnumerable<ITrakHoundObjectStatisticEntity> entities;
    private ITrakHoundObjectStatisticEntity selectedEntity;
    private string previousObjectUuid;

    private IEnumerable<SpanItem> spans;
    private long selectedSpan;
    private long previousSelectedSpan;

    private DateTime? timeRangeStart;
    private DateTime? timeRangeEnd;
    private IEnumerable<TrakHoundStatisticDataType> dataTypes = Enum.GetValues<TrakHoundStatisticDataType>();
    private TrakHoundStatisticDataType dataType = TrakHoundStatisticDataType.Float;
    private string value;
    private bool loading;
    private bool publishLoading;

    enum QueryType
    {
        Latest,
        All
    }

    struct SpanItem
    {
        public string Display { get; set; }
        public long Span { get; set; }
    }

    struct TableItem
    {
        public string Uuid { get; set; }
        public DateTime TimeRangeStart { get; set; }
        public DateTime TimeRangeEnd { get; set; }
        public string Value { get; set; }
        public TrakHoundStatisticDataType DataType { get; set; }
        public string SourceUuid { get; set; }
        public DateTime TimestampLocal { get; set; }
        public long TimestampUnix { get; set; }
    }


    [CascadingParameter(Name = "ObjectExplorerService")]
    public ObjectExplorerService ObjectExplorerService { get; set; }

    [Parameter]
    public ITrakHoundObjectEntity Object { get; set; }


    protected async override Task OnInitializedAsync()
    {
        await Load();
    }

    protected async override Task OnParametersSetAsync()
    {
        await Load();
    }

    private async Task Load(bool forceReload = false)
    {
        if (forceReload || (ObjectExplorerService != null && Object != null && (Object.Uuid != previousObjectUuid || selectedSpan != previousSelectedSpan)))
        {
            tableItems = null;
            loading = true;
            await InvokeAsync(StateHasChanged);

            var client = ObjectExplorerService.GetClient();
            if (client != null)
            {
                previousObjectUuid = Object.Uuid;

                // Get List of Spans
                var timeRangeSpans = await client.System.Entities.Objects.Statistic.SpansByObjectUuid(Object.Uuid, 0, long.MaxValue);
                if (!timeRangeSpans.IsNullOrEmpty())
                {
                    var spanItems = new List<SpanItem>();
                    foreach (var timeRangeSpan in timeRangeSpans)
                    {
                        var spanItem = new SpanItem();
                        spanItem.Display = TimeRange.GetTimeRangeType(timeRangeSpan.Span).ToString();
                        spanItem.Span = timeRangeSpan.Span;
                        spanItems.Add(spanItem);
                    }
                    spans = spanItems;
                    if (selectedSpan < 1) selectedSpan = spans.FirstOrDefault().Span;
                }
                previousSelectedSpan = selectedSpan;

                if (selectedSpan > 0)
                {
                     entities = await client.System.Entities.Objects.Statistic.QueryByObjectUuid(Object.Uuid, 0, long.MaxValue, selectedSpan, 0, 100, TrakHound.SortOrder.Descending);

                    if (!entities.IsNullOrEmpty())
                    {
                        var items = new List<TableItem>();

                        foreach (var entity in entities.OrderByDescending(o => o.Timestamp))
                        {
                            var item = new TableItem();
                            item.Uuid = entity.Uuid;
                            item.TimeRangeStart = entity.TimeRangeStart.ToLocalDateTime();
                            item.TimeRangeEnd = entity.TimeRangeEnd.ToLocalDateTime();
                            item.DataType = (TrakHoundStatisticDataType)entity.DataType;
                            item.Value = entity.Value;
                            item.SourceUuid = entity.SourceUuid;
                            item.TimestampLocal = entity.Timestamp.ToLocalDateTime();
                            item.TimestampUnix = entity.Timestamp;
                            items.Add(item);
                        }

                        tableItems = items;
                    }
                }
            }
        }

        loading = false;
        await InvokeAsync(StateHasChanged);
    }

    private async void Save()
    {
        publishLoading = true;
        await InvokeAsync(StateHasChanged);

        if (ObjectExplorerService != null && Object != null && timeRangeStart != null && timeRangeEnd != null && !string.IsNullOrEmpty(value))
        {
            var client = ObjectExplorerService.GetClient();
            if (client != null)
            {
                var timestamp = DateTime.Now;
                var timeRangeId = new TimeRange(timeRangeStart.Value, timeRangeEnd.Value).ToString();

                var publishEntity = new TrakHoundObjectStatisticEntity(Object.Uuid, timeRangeStart.Value, timeRangeEnd.Value, value, dataType: dataType);

                if (await client.Entities.PublishStatistic(Object.GetAbsolutePath(), timeRangeStart.Value, timeRangeEnd.Value, value, dataType, timestamp, async: false))
                {
                    previousObjectUuid = null;
                    await Load();

                    ObjectExplorerService.LoadContent(Object);
                    ObjectExplorerService.UpdateValue(Object.Uuid);

                    ObjectExplorerService.AddNotification(NotificationType.Information, "Statistic Published Successfully", Object.GetAbsolutePath());
                }
                else
                {
                    ObjectExplorerService.AddNotification(NotificationType.Error, "Error Publishing Statistic");
                }
            }
        }

        publishLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    private async void CopyClicked(string value)
    {
        ObjectExplorerService.AddNotification(NotificationType.Information, "Copied to Clipboard", duration: 5000);

        await InvokeAsync(StateHasChanged);
    }

    private async void DeleteClicked(string uuid)
    {
        var client = ObjectExplorerService.GetClient();
        if (client != null)
        {
            if (await client.System.Entities.Objects.Statistic.Delete(uuid, TrakHoundOperationMode.Sync))
            {
                previousObjectUuid = null;
                await Load();

                ObjectExplorerService.AddNotification(NotificationType.Information, "Statistic Deleted Successfully", uuid);
            }
            else
            {
                ObjectExplorerService.AddNotification(NotificationType.Error, "Error Deleting Statistic");
            }
        }
    }

    private async void SelectedSpanChanged(long span)
    {
        selectedSpan = span;
        await Load();
    }

}
