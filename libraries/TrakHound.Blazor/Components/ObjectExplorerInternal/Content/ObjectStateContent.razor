@using TrakHound.Entities;
@using TrakHound.Requests;

@if (ObjectExplorerService != null && Object != null)
{
    var objectLink = ObjectExplorerService.ObjectsQueryLinkFunction != null ? ObjectExplorerService.ObjectsQueryLinkFunction($"select >> from [{Object.GetAbsolutePath()}]") : null;
    var resultQuery = $"select > from [{Object.GetAbsolutePath()}] stop now order by [Timestamp] desc take 100";
    var queryLink = ObjectExplorerService.ObjectsQueryLinkFunction != null ? ObjectExplorerService.ObjectsQueryLinkFunction(resultQuery) : null;

    <div class="state-content">
        <div class="input-panel">
            <div class="input-panel-container">
                <div class="input-panel-buttons">

                    @if (!publishLoading)
                    {
                        <button class="btn btn-sm btn-primary btn-save" @onclick="Save"><span class="icon fa-solid fa-sharp fa-paper-plane"></span>Publish</button>
                    }
                    else
                    {
                        <button class="btn btn-sm btn-primary btn-save disabled"><span class="icon fa-solid fa-sharp fa-loader spin"></span>Publishing..</button>
                    }

                    @if (!loading)
                    {
                        <button class="btn btn-sm btn-light btn-refresh" @onclick="() => Load(true)"><span class="icon fa-solid fa-sharp fa-rotate"></span></button>
                    }
                    else
                    {
                        <button class="btn btn-sm btn-light btn-refresh disabled"><span class="icon fa-solid fa-sharp fa-loader spin"></span></button>
                    }

                </div>
                <div class="input-panel-input">
                    <TextBox @bind-Value="@definition" PlaceHolder="State Definition.." Enabled="@(!publishLoading)" />
                </div>
                <div class="input-panel-batch">
                    <RadzenNumeric @bind-Value="@ttl" Min="0" Disabled="@publishLoading" />
                </div>
            </div>
        </div>
        <div class="query-panel">
            <div class="query-panel-container">
                <span class="query-label">Query</span>
                <a href="@queryLink" class="btn btn-link btn-query">@resultQuery</a>
            </div>
        </div>
        <div class="table-panel">

            @if (!loading)
            {
                <RadzenDataGrid Data="@tableItems"
                                TItem="TableItem"
                                Density="Density.Compact"
                                GridLines="DataGridGridLines.Vertical">
                    <Columns>
                        <RadzenDataGridColumn TItem="TableItem" Property="Type" Title="Type" />
                        <RadzenDataGridColumn TItem="TableItem" Property="Description" Title="Description" />
                        <RadzenDataGridColumn TItem="TableItem" Property="TTL" Title="TTL" Width="100px" />
                        <RadzenDataGridColumn TItem="TableItem" Property="Timestamp" Title="Timestamp" Width="170px" />
                        <RadzenDataGridColumn TItem="TableItem" CssClass="delete" Width="70px" Sortable="false">
                            <Template Context="context">
                                <button class="btn-link btn btn-sm" @onclick="() => DeleteClicked(context.Uuid)">Delete</button>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            }
            else
            {
                <Loading Message="Loading.." />
            }

        </div>
    </div>
}

@code {

    private IEnumerable<TableItem> tableItems;
    private IEnumerable<TrakHoundState> entities;
    private TrakHoundState selectedEntity;
    private string previousObjectUuid;

    private string definition;
    private int ttl;
    private bool loading;
    private bool publishLoading;

    struct TableItem
    {
        public string Uuid { get; set; }
        public string Type { get; set; }
        public string Description { get; set; }
        public int TTL { get; set; }
        public DateTime Timestamp { get; set; }
    }


    [CascadingParameter(Name = "ObjectExplorerService")]
    public ObjectExplorerService ObjectExplorerService { get; set; }

    [Parameter]
    public ITrakHoundObjectEntity Object { get; set; }


    protected async override Task OnInitializedAsync()
    {
        await Load();
    }

    protected async override Task OnParametersSetAsync()
    {
        await Load();
    }

    private async Task Load(bool forceReload = false)
    {
        if (forceReload || (ObjectExplorerService != null && Object != null && Object.Uuid != previousObjectUuid))
        {
            tableItems = null;
            loading = true;
            await InvokeAsync(StateHasChanged);

            _ = Task.Run(async () =>
            {
                var client = ObjectExplorerService.GetClient();
                if (client != null)
                {
                    previousObjectUuid = Object.Uuid;
                    entities = await client.Entities.GetStates(Object.GetAbsolutePath(), 0, 100, TrakHound.SortOrder.Descending);

                    if (!entities.IsNullOrEmpty())
                    {
                        var items = new List<TableItem>();

                        foreach (var entity in entities.OrderByDescending(o => o.Timestamp))
                        {
                            var item = new TableItem();
                            item.Uuid = entity.Uuid;
                            item.Type = entity.Type;
                            item.Description = entity.Description;
                            item.TTL = entity.TTL;
                            item.Timestamp = entity.Timestamp.ToLocalTime();
                            items.Add(item);
                        }

                        tableItems = items;
                    }
                }

                loading = false;
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    private async void Save()
    {
        publishLoading = true;
        await InvokeAsync(StateHasChanged);

        if (ObjectExplorerService != null && Object != null && !string.IsNullOrEmpty(definition))
        {
            _ = Task.Run(async () =>
            {
                var client = ObjectExplorerService.GetClient();
                if (client != null)
                {
                    if (await client.Entities.PublishState(Object.GetAbsolutePath(), definition, ttl))
                    {
                        previousObjectUuid = null;
                        await Load();

                        ObjectExplorerService.LoadContent(Object);
                        ObjectExplorerService.UpdateValue(Object.Uuid);

                        ObjectExplorerService.AddNotification(NotificationType.Information, "State Published Successfully", Object.GetAbsolutePath());
                    }
                    else
                    {
                        ObjectExplorerService.AddNotification(NotificationType.Error, "Error Publishing State");
                    }
                }

                publishLoading = false;
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    private async void CopyClicked(string value)
    {
        ObjectExplorerService.AddNotification(NotificationType.Information, "Copied to Clipboard", duration: 5000);

        await InvokeAsync(StateHasChanged);
    }

    private async void DeleteClicked(string uuid)
    {
        var client = ObjectExplorerService.GetClient();
        if (client != null)
        {
            if (await client.System.Entities.Objects.State.Delete(uuid, TrakHoundOperationMode.Sync))
            {
                previousObjectUuid = null;
                await Load();

                ObjectExplorerService.AddNotification(NotificationType.Information, "State Deleted Successfully", uuid);
            }
            else
            {
                ObjectExplorerService.AddNotification(NotificationType.Error, "Error Deleting State");
            }
        }
    }

}
