@inject DialogService DialogService
@using TrakHound.Entities

@if (ObjectExplorerService != null && Object != null)
{
    var resultQuery = $"select > from [{Object.GetAbsolutePath()}]";
    var queryLink = $"{ObjectExplorerService.BaseUrl}/entities/objects?query={resultQuery}";

    <div class="time-range-content">
        <div class="input-panel">
            <div class="input-panel-container">
                <div class="input-panel-buttons">

                    @if (!publishLoading)
                    {
                        <button class="btn btn-sm btn-primary btn-save" @onclick="Save"><span class="icon fa-solid fa-sharp fa-paper-plane"></span>Publish</button>
                    }
                    else
                    {
                        <button class="btn btn-sm btn-primary btn-save disabled"><span class="icon fa-solid fa-sharp fa-loader spin"></span>Publishing..</button>
                    }

                    @if (!loading)
                    {
                        <button class="btn btn-sm btn-light btn-refresh" @onclick="() => Load(true)"><span class="icon fa-solid fa-sharp fa-rotate"></span></button>
                    }
                    else
                    {
                        <button class="btn btn-sm btn-light btn-refresh disabled"><span class="icon fa-solid fa-sharp fa-loader spin"></span></button>
                    }

                </div>
                <div class="timestamp-container">
                    <label>Start</label>
                    <RadzenDatePicker @bind-Value=@start ShowTime="true" ShowSeconds="true" HoursStep="1" MinutesStep="1" SecondsStep="1" DateFormat="G" HourFormat="12" Kind="DateTimeKind.Local" Disabled="@publishLoading" />
                </div>
                <div class="timestamp-container">
                    <label>End</label>
                    <RadzenDatePicker @bind-Value=@end ShowTime="true" ShowSeconds="true" HoursStep="1" MinutesStep="1" SecondsStep="1" DateFormat="G" HourFormat="12" Kind="DateTimeKind.Local" Disabled="@publishLoading" />
                </div>
            </div>
        </div>

        <div class="query-panel">
            <div class="query-panel-container">
                <span class="query-label">Query</span>
                <a href="@queryLink" class="btn btn-link btn-query">@resultQuery</a>
            </div>
        </div>

        @if (!loading)
        {
            if (entity != null)
            {
                var entityStart = entity.Start.ToLocalDateTime();
                var entityEnd = entity.End.ToLocalDateTime();

                <div class="entity-panel">
                    <div class="entity-panel-container">
                        <div class="calendar-label-start">
                            <label>@entityStart.ToLongDateString()</label>
                        </div>
                        <div class="calendar-panel-start">
                            <Calendar DateTime="@entityStart" />
                        </div>
                        <div class="timestamp-panel-start">
                            <TimestampInformation DateTime="@entityStart" />
                        </div>
                        <div class="calendar-label-end">
                            <label>@entityEnd.ToLongDateString()</label>
                        </div>
                        <div class="calendar-panel-end">
                            <Calendar DateTime="@entityEnd" />
                        </div>
                        <div class="timestamp-panel-end">
                            <TimestampInformation DateTime="@entityEnd" />
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <Loading Message="Loading.." />
        }

    </div>
}

@code {

    private IEnumerable<TableItem> tableItems;
    private ITrakHoundObjectTimeRangeEntity entity;
    private string previousObjectUuid;

    private DateTime? start;
    private DateTime? end;
    private bool loading;
    private bool publishLoading;

    struct TableItem
    {
        public string Uuid { get; set; }
        public DateTime StartLocal { get; set; }
        public DateTime EndLocal { get; set; }
        public string SourceUuid { get; set; }
        public long Created { get; set; }
    }


    [CascadingParameter(Name = "ObjectExplorerService")]
    public ObjectExplorerService ObjectExplorerService { get; set; }

    [Parameter]
    public ITrakHoundObjectEntity Object { get; set; }


    protected async override Task OnInitializedAsync()
    {
        await Load();
    }

    protected async override Task OnParametersSetAsync()
    {
        await Load();
    }

    private async Task Load(bool forceReload = false)
    {
        if (forceReload || (ObjectExplorerService != null && Object != null && Object.Uuid != previousObjectUuid))
        {
            tableItems = null;
            loading = true;
            await InvokeAsync(StateHasChanged);

            _ = Task.Run(async () =>
            {
                var client = ObjectExplorerService.GetClient();
                if (client != null)
                {
                    var today = DateTime.Today;
                    start = today;
                    end = today.AddDays(1);

                    previousObjectUuid = Object.Uuid;

                    entity = await client.System.Entities.Objects.TimeRange.QueryByObjectUuid(Object.Uuid);
                    if (entity != null)
                    {
                        start = entity.Start.ToLocalDateTime();
                        end = entity.End.ToLocalDateTime();
                    }
                }

                loading = false;
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    private async void Save()
    {
        publishLoading = true;
        await InvokeAsync(StateHasChanged);

        if (ObjectExplorerService != null && Object != null && start.HasValue && end.HasValue)
        {
            _ = Task.Run(async () =>
            {
                var client = ObjectExplorerService.GetClient();
                if (client != null)
                {
                    if (await client.Entities.PublishTimeRange(Object.GetAbsolutePath(), start.Value, end.Value, false))
                    {
                        previousObjectUuid = null;
                        await Load();

                        ObjectExplorerService.AddNotification(NotificationType.Information, "TimeRange Published Successfully", Object.GetAbsolutePath());
                    }
                    else
                    {
                        ObjectExplorerService.AddNotification(NotificationType.Error, "Error Publishing TimeRange");
                    }
                }

                publishLoading = false;
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    private async void CopyClicked(string value)
    {
        ObjectExplorerService.AddNotification(NotificationType.Information, "Copied to Clipboard", duration: 5000);

        await InvokeAsync(StateHasChanged);
    }

    private async void DeleteClicked(string uuid)
    {
        var client = ObjectExplorerService.GetClient();
        if (client != null)
        {
            if (await client.System.Entities.Objects.TimeRange.Delete(uuid, TrakHoundOperationMode.Sync))
            {
                previousObjectUuid = null;
                await Load();

                ObjectExplorerService.AddNotification(NotificationType.Information, "TimeRange Deleted Successfully", uuid);
            }
            else
            {
                ObjectExplorerService.AddNotification(NotificationType.Error, "Error Deleting TimeRange");
            }
        }
    }

}
