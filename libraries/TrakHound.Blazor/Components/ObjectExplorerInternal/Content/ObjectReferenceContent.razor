@using TrakHound.Entities;
@using TrakHound.Requests;

@if (ObjectExplorerService != null && Object != null)
{
    var objectLink = ObjectExplorerService.ObjectsQueryLinkFunction != null ? ObjectExplorerService.ObjectsQueryLinkFunction($"select >> from [{Object.GetAbsolutePath()}]") : null;

    var resultQuery = $"select > from [{Object.GetAbsolutePath()}]";
    var queryLink = ObjectExplorerService.ObjectsQueryLinkFunction != null ? ObjectExplorerService.ObjectsQueryLinkFunction(resultQuery) : null;

    <div class="reference-content">
        <div class="input-panel">
            <div class="input-panel-container">
                <div class="input-panel-buttons">

                    @if (!publishLoading)
                    {
                        <button class="btn btn-sm btn-primary btn-save" @onclick="Save"><span class="icon fa-solid fa-sharp fa-paper-plane"></span>Publish</button>
                    }
                    else
                    {
                        <button class="btn btn-sm btn-primary btn-save disabled"><span class="icon fa-solid fa-sharp fa-loader spin"></span>Publishing..</button>
                    }

                    @if (!loading)
                    {
                        <button class="btn btn-sm btn-light btn-refresh" @onclick="() => Load(true)"><span class="icon fa-solid fa-sharp fa-rotate"></span></button>
                    }
                    else
                    {
                        <button class="btn btn-sm btn-light btn-refresh disabled"><span class="icon fa-solid fa-sharp fa-loader spin"></span></button>
                    }

                </div>
                <div class="input-panel-input">
                    <TextBox @bind-Value="@targetPath" PlaceHolder="Target Path.." Enabled="@(!publishLoading)" OnDrop="OnTargetDrop" />
                </div>
            </div>
        </div>
        <div class="query-panel">
            <div class="query-panel-container">
                <span class="query-label">Query</span>
                <a href="@queryLink" class="btn btn-link btn-query">@resultQuery</a>
            </div>
        </div>

        @if (!loading)
        {
            if (targetObject != null)
            {
                <div class="target-panel">
                    <div class="target-header-panel">
                        <span class="target-header">Target</span>
                    </div>
                    <div class="target-information-panel">
                        <ObjectExplorerObjectInformation Object="@targetObject" />
                    </div>
                </div>
            }
        }
        else
        {
            <Loading Message="Loading.." />
        }

    </div>
}

@code {

    private IEnumerable<TableItem> tableItems;
    private TrakHoundReference entity;
    private ITrakHoundObjectEntity targetObject;
    private string previousObjectUuid;

    private string targetPath;
    private bool loading;
    private bool publishLoading;

    struct TableItem
    {
        public string Uuid { get; set; }
        public string Target { get; set; }
        public DateTime Created { get; set; }
    }


    [CascadingParameter(Name = "ObjectExplorerService")]
    public ObjectExplorerService ObjectExplorerService { get; set; }

    [Parameter]
    public ITrakHoundObjectEntity Object { get; set; }


    protected async override Task OnInitializedAsync()
    {
        await Load();
    }

    protected async override Task OnParametersSetAsync()
    {
        await Load();
    }

    private async Task Load(bool forceReload = false)
    {
        if (forceReload || (ObjectExplorerService != null && Object != null && Object.Uuid != previousObjectUuid))
        {
            tableItems = null;
            loading = true;
            await InvokeAsync(StateHasChanged);

            _ = Task.Run(async () =>
            {
                var client = ObjectExplorerService.GetClient();
                if (client != null)
                {
                    previousObjectUuid = Object.Uuid;
                    entity = await client.Entities.GetReference(Object.GetAbsolutePath());
                    if (entity != null && !string.IsNullOrEmpty(entity.TargetUuid))
                    {
                        targetObject = await client.System.Entities.Objects.ReadByUuid(entity.TargetUuid);
                    }
                }

                loading = false;
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    private async void Save()
    {
        publishLoading = true;
        await InvokeAsync(StateHasChanged);

        if (ObjectExplorerService != null && Object != null && !string.IsNullOrEmpty(targetPath))
        {
            _ = Task.Run(async () =>
            {
                var client = ObjectExplorerService.GetClient();
                if (client != null)
                {
                    if (await client.Entities.PublishReference(Object.GetAbsolutePath(), targetPath))
                    {
                        previousObjectUuid = null;
                        await Load();

                        ObjectExplorerService.AddNotification(NotificationType.Information, "Reference Published Successfully", Object.GetAbsolutePath());
                    }
                    else
                    {
                        ObjectExplorerService.AddNotification(NotificationType.Error, "Error Publishing Reference");
                    }
                }

                publishLoading = false;
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    private async void CopyClicked(string value)
    {
        ObjectExplorerService.AddNotification(NotificationType.Information, "Copied to Clipboard", duration: 5000);

        await InvokeAsync(StateHasChanged);
    }

    private async void DeleteClicked(string uuid)
    {
        var client = ObjectExplorerService.GetClient();
        if (client != null)
        {
            if (await client.System.Entities.Objects.Reference.Delete(uuid, TrakHoundOperationMode.Sync))
            {
                previousObjectUuid = null;
                await Load();

                ObjectExplorerService.AddNotification(NotificationType.Information, "Reference Deleted Successfully", uuid);
            }
            else
            {
                ObjectExplorerService.AddNotification(NotificationType.Error, "Error Deleting Reference");
            }
        }
    }

    private async void OnTargetDrop(DragEventArgs args)
    {
        var dragData = ObjectExplorerService.GetDragData();
        if (dragData != null)
        {
            switch (dragData.ContentType)
            {
                case "ObjectUuid": targetPath = $"uuid={dragData.Content}"; break;
                case "ObjectPath": targetPath = dragData.Content; break;
            }
        }

        await InvokeAsync(StateHasChanged);
    }

}
