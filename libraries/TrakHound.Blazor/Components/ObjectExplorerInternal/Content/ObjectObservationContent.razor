@using TrakHound.Entities;

@if (ObjectExplorerService != null && Object != null)
{
    var resultQuery = $"select > from [{Object.GetAbsolutePath()}] stop now order desc take 100;";
    var queryLink = $"{ObjectExplorerService.BaseUrl}/entities/objects?query={resultQuery}";

    <div class="observation-content">
        <div class="input-panel">
            <div class="input-panel-container">
                <div class="input-panel-buttons">

                    @if (!publishLoading)
                    {
                        <button class="btn btn-sm btn-primary btn-save" @onclick="Save"><span class="icon fa-solid fa-sharp fa-paper-plane"></span>Publish</button>
                    }
                    else
                    {
                        <button class="btn btn-sm btn-primary btn-save disabled"><span class="icon fa-solid fa-sharp fa-loader spin"></span>Publishing..</button>
                    }

                    @if (!loading)
                    {
                        <button class="btn btn-sm btn-light btn-refresh" @onclick="() => Load(true)"><span class="icon fa-solid fa-sharp fa-rotate"></span></button>
                    }
                    else
                    {
                        <button class="btn btn-sm btn-light btn-refresh disabled"><span class="icon fa-solid fa-sharp fa-loader spin"></span></button>
                    }

                </div>
                <div class="input-panel-type">
                    <RadzenDropDown @bind-Value="@dataType" Data="@dataTypes" Disabled="@publishLoading" />
                </div>
                <div class="input-panel-input">
                    <TextBox @bind-Value="@value" PlaceHolder="Value.." Enabled="@(!publishLoading)" />
                </div>
@*                  <div class="input-panel-batch">
                    <RadzenNumeric @bind-Value="@batchId" Min="0" />
                </div>
                <div class="input-panel-sequence">
                    <RadzenNumeric @bind-Value="@sequence" Min="0" />
                </div>
                <div class="input-panel-timestamp">
                    <RadzenDatePicker @bind-Value=@timestamp ShowTime="true" ShowSeconds="true" HoursStep="1" MinutesStep="1" SecondsStep="1" DateFormat="G" HourFormat="12" Kind="DateTimeKind.Local" />
                </div>
                <div class="input-panel-shortcut">
                    <button class="btn btn-sm btn-light btn-shortcut" @onclick="NowClicked"><span class="icon fa-regular fa-sharp fa-clock"></span>Now</button>
                </div> *@
            </div>
        </div>
        <div class="query-panel">
            <div class="query-panel-container">
                <span class="query-label">Query</span>
                <a href="@queryLink" class="btn btn-link btn-query">@resultQuery</a>
            </div>
        </div>
        <div class="table-panel">

            @if (!loading)
            {
                <RadzenDataGrid Data="@tableItems"
                                TItem="TableItem"
                                Density="Density.Compact"
                                GridLines="DataGridGridLines.Vertical">
                    <Columns>
                        <RadzenDataGridColumn TItem="TableItem" Property="Value" Title="Value">
                            <Template Context="context">
                                <span class="value-cell">@context.ValueDisplay</span>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="TableItem" Property="DataType" Title="DataType" Width="100px" />
                        <RadzenDataGridColumn TItem="TableItem" Property="BatchId" Title="BatchId" Width="100px" />
                        <RadzenDataGridColumn TItem="TableItem" Property="Sequence" Title="Sequence" Width="100px" />
                        <RadzenDataGridColumn TItem="TableItem" Property="Timestamp" Title="Timestamp" Width="170px" />
                    </Columns>
                </RadzenDataGrid>
            }
            else
            {
                <Loading Message="Loading.." />
            }

        </div>

    </div>
}

@code {

    private IEnumerable<TableItem> tableItems;
    private IEnumerable<ITrakHoundObjectObservationEntity> entities;
    private ITrakHoundObjectObservationEntity selectedEntity;
    private string previousObjectUuid;

    private IEnumerable<TrakHoundObservationDataType> dataTypes = Enum.GetValues<TrakHoundObservationDataType>();
    private TrakHoundObservationDataType dataType = TrakHoundObservationDataType.String;
    private string value;
    private ulong batchId;
    private ulong sequence;
    private DateTime timestamp;
    private bool loading;
    private bool publishLoading;

    struct TableItem
    {
        public string Uuid { get; set; }
        public TrakHoundObservationDataType DataType { get; set; }
        public string Value { get; set; }
        public string ValueDisplay { get; set; }
        public ulong BatchId { get; set; }
        public ulong Sequence { get; set; }
        public string SourceUuid { get; set; }
        public DateTime Timestamp { get; set; }
    }


    [CascadingParameter(Name = "ObjectExplorerService")]
    public ObjectExplorerService ObjectExplorerService { get; set; }

    [Parameter]
    public ITrakHoundObjectEntity Object { get; set; }


    protected async override Task OnInitializedAsync()
    {
        await Load();
    }

    protected async override Task OnParametersSetAsync()
    {
        await Load();
    }

    private async Task Load(bool forceReload = false)
    {
        if (forceReload || (ObjectExplorerService != null && Object != null && Object.Uuid != previousObjectUuid))
        {
            tableItems = null;
            loading = true;
            await InvokeAsync(StateHasChanged);

            _= Task.Run(async () =>
            {
                var client = ObjectExplorerService.GetClient();
                if (client != null)
                {
                    previousObjectUuid = Object.Uuid;

                    // Get Observations
                    entities = await client.System.Entities.Objects.Observation.QueryByObjectUuid(Object.Uuid, 0, long.MaxValue, 0, 100, TrakHound.SortOrder.Descending);

                    if (!entities.IsNullOrEmpty())
                    {
                        var items = new List<TableItem>();

                        foreach (var entity in entities.OrderByDescending(o => o.Timestamp))
                        {
                            var item = new TableItem();
                            item.Uuid = entity.Uuid;
                            item.DataType = (TrakHoundObservationDataType)entity.DataType;
                            item.BatchId = entity.BatchId;
                            item.Sequence = entity.Sequence;
                            item.SourceUuid = entity.SourceUuid;
                            item.Timestamp = entity.Timestamp.ToLocalDateTime();

                            item.Value = entity.Value;
                            item.ValueDisplay = entity.Value;

                            items.Add(item);
                        }

                        tableItems = items;
                    }
                }

                loading = false;
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    private async void Save()
    {
        publishLoading = true;
        await InvokeAsync(StateHasChanged);

        if (ObjectExplorerService != null && Object != null && !string.IsNullOrEmpty(value))
        {
            _ = Task.Run(async () =>
            {
                var client = ObjectExplorerService.GetClient();
                if (client != null)
                {
                    var ts = timestamp > DateTime.MinValue ? timestamp.ToUnixTime() : UnixDateTime.Now;

                    if (await client.Entities.PublishObservation(Object.GetAbsolutePath(), value, dataType, timestamp, batchId, sequence, false))
                    {
                        previousObjectUuid = null;
                        await Load();

                        ObjectExplorerService.LoadContent(Object);
                        ObjectExplorerService.UpdateValue(Object.Uuid);

                        ObjectExplorerService.AddNotification(NotificationType.Information, "Observation Published Successfully", Object.GetAbsolutePath());
                    }
                    else
                    {
                        ObjectExplorerService.AddNotification(NotificationType.Error, "Error Publishing Observation");
                    }
                }

                publishLoading = false;
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    private async void CopyClicked(string value)
    {
        ObjectExplorerService.AddNotification(NotificationType.Information, "Copied to Clipboard", duration: 5000);

        await InvokeAsync(StateHasChanged);
    }

    // private async void DeleteClicked(string uuid)
    // {
    //     var client = ObjectExplorerService.GetClient();
    //     if (client != null)
    //     {
    //         if (await client.System.Entities.Objects.Observation.Delete(uuid, TrakHoundOperationMode.Sync))
    //         {
    //             previousObjectUuid = null;
    //             Load();

    //             ObjectExplorerService.AddNotification(NotificationType.Information, "Observation Deleted Successfully", uuid);
    //         }
    //         else
    //         {
    //             ObjectExplorerService.AddNotification(NotificationType.Error, "Error Deleting Observation");
    //         }
    //     }
    // }


    private async void NowClicked()
    {
        timestamp = DateTime.Now;
        await InvokeAsync(StateHasChanged);
    }

    private string GetObjectLink(string path)
    {
        var query = $"select >> from [{path}]";
        return ObjectExplorerService.ObjectsQueryLinkFunction != null ? ObjectExplorerService.ObjectsQueryLinkFunction(query) : null;
    }

}
