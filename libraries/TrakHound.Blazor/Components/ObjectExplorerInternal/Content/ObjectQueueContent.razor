@using TrakHound.Entities;
@using TrakHound.Requests;

@if (ObjectExplorerService != null && Object != null)
{
    <div class="queue-content">
        <div class="input-panel">
            <div class="input-panel-container">
                <div class="input-panel-buttons">

                    @if (!publishLoading)
                    {
                        <button class="btn btn-sm btn-primary btn-save" @onclick="Save"><span class="icon fa-solid fa-sharp fa-paper-plane"></span>Publish</button>
                    }
                    else
                    {
                        <button class="btn btn-sm btn-primary btn-save disabled"><span class="icon fa-solid fa-sharp fa-loader spin"></span>Publishing..</button>
                    }

                    @if (!loading)
                    {
                        <button class="btn btn-sm btn-light btn-refresh" @onclick="() => Load(true)"><span class="icon fa-solid fa-sharp fa-rotate"></span></button>
                    }
                    else
                    {
                        <button class="btn btn-sm btn-light btn-refresh disabled"><span class="icon fa-solid fa-sharp fa-loader spin"></span></button>
                    }

                </div>
                <div class="input-panel-input">
                    <TextBox @bind-Value="@memberPath" PlaceHolder="Member Path.." Enabled="@(!publishLoading)" />
                </div>
                <div class="input-panel-input">
                    <RadzenNumeric @bind-Value="@index" Placeholder="Index" Disabled="@publishLoading" />
                </div>
            </div>
        </div>
        <div class="table-panel">

            @if (!loading)
            {
                <RadzenDataGrid Data="@tableItems"
                                TItem="TableItem"
                                Density="Density.Compact"
                                GridLines="DataGridGridLines.Vertical">
                    <Columns>
                        <RadzenDataGridColumn TItem="TableItem" Property="Index" Title="Index" Width="100px" />
                        <RadzenDataGridColumn TItem="TableItem" Property="Member" Title="Member">
                            <Template Context="context">
                                <a href="@GetObjectLink(context.Member)" class="member-item">@context.Member</a>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="TableItem" Property="Timestamp" Title="Timestamp" Width="170px" />
                        <RadzenDataGridColumn TItem="TableItem" CssClass="delete" Width="70px" Sortable="false">
                            <Template Context="context">
                                <button class="btn-link btn btn-sm" @onclick="() => DeleteClicked(context.Uuid)">Delete</button>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            }
            else
            {
                <Loading Message="Loading.." />
            }

        </div>
    </div>
}

@code {

    private IEnumerable<TableItem> tableItems;
    private IEnumerable<TrakHoundQueue> entities;
    private TrakHoundQueue selectedEntity;
    private string previousObjectUuid;

    private string memberPath;
    private int index;
    private bool loading;
    private bool publishLoading;

    struct TableItem
    {
        public string Uuid { get; set; }
        public long Index { get; set; }
        public string Member { get; set; }
        public DateTime Timestamp { get; set; }
    }


    [CascadingParameter(Name = "ObjectExplorerService")]
    public ObjectExplorerService ObjectExplorerService { get; set; }

    [Parameter]
    public ITrakHoundObjectEntity Object { get; set; }


    protected async override Task OnInitializedAsync()
    {
        await Load();
    }

    protected async override Task OnParametersSetAsync()
    {
        await Load();
    }

    private async Task Load(bool forceReload = false)
    {
        if (forceReload || (ObjectExplorerService != null && Object != null && Object.Uuid != previousObjectUuid))
        {
            tableItems = null;
            loading = true;
            await InvokeAsync(StateHasChanged);

            var client = ObjectExplorerService.GetClient();
            if (client != null)
            {
                previousObjectUuid = Object.Uuid;
                entities = await client.Entities.GetQueues(Object.GetAbsolutePath());

                if (!entities.IsNullOrEmpty())
                {
                    var items = new List<TableItem>();

                    foreach (var entity in entities.OrderBy(o => o.Index))
                    {
                        var item = new TableItem();
                        item.Uuid = entity.Uuid;
                        item.Index = entity.Index;
                        item.Member = entity.Member;
                        item.Timestamp = entity.Timestamp.ToLocalTime();
                        items.Add(item);
                    }

                    tableItems = items;
                }
            }
        }

        loading = false;
        await InvokeAsync(StateHasChanged);
    }

    private async void Save()
    {
        publishLoading = true;
        await InvokeAsync(StateHasChanged);

        if (ObjectExplorerService != null && Object != null && !string.IsNullOrEmpty(memberPath))
        {
            var client = ObjectExplorerService.GetClient();
            if (client != null)
            {
                if (await client.Entities.PublishQueue(Object.GetAbsolutePath(), memberPath, index))
                {
                    previousObjectUuid = null;
                    await Load();

                    ObjectExplorerService.AddNotification(NotificationType.Information, "Queue Published Successfully", Object.GetAbsolutePath());
                }
                else
                {
                    ObjectExplorerService.AddNotification(NotificationType.Error, "Error Publishing Queue");
                }
            }
        }

        publishLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    private async void CopyClicked(string value)
    {
        ObjectExplorerService.AddNotification(NotificationType.Information, "Copied to Clipboard", duration: 5000);

        await InvokeAsync(StateHasChanged);
    }

    private async void DeleteClicked(string uuid)
    {
        var client = ObjectExplorerService.GetClient();
        if (client != null)
        {
            if (await client.System.Entities.Objects.Queue.Delete(uuid, TrakHoundOperationMode.Sync))
            {
                previousObjectUuid = null;
                await Load();

                ObjectExplorerService.AddNotification(NotificationType.Information, "Queue Deleted Successfully", uuid);
            }
            else
            {
                ObjectExplorerService.AddNotification(NotificationType.Error, "Error Deleting Queue");
            }
        }
    }

    private string GetObjectLink(string path)
    {
        var query = $"select >> from [{path}]";
        return ObjectExplorerService.ObjectsQueryLinkFunction != null ? ObjectExplorerService.ObjectsQueryLinkFunction(query) : null;
    }

}
