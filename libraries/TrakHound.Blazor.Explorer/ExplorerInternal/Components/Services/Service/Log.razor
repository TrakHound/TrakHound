@rendermode InteractiveServer
@inject ExplorerService explorerService
@using TrakHound.Blazor.Services
@using TrakHound.Logging
@using TrakHound.Services

<LogExplorer GetLogNames="GetLogNames"
             GetLogLineConsumer="SubscribeLogLines"
             GetLogLines="GetLogLines"
             @bind-SelectedLogName="selectedLogName"
             @bind-SelectedLogLevel="selectedLogLevel"
             @bind-From="@from"
             @bind-To="@to" />

@code {

    private IEnumerable<string> logNames;
    private string selectedLogName;
    private TrakHoundLogLevel selectedLogLevel;
    private IEnumerable<TrakHoundLogItem> historyLogLines;
    private DateTime from;
    private DateTime to;
    private int skip = 0;
    private int take = 1000;
    private TrakHound.SortOrder sortOrder = TrakHound.SortOrder.Ascending;


    [CascadingParameter(Name = "Explorer")]
    public TrakHound.Blazor.Explorer Explorer { get; set; }

    [Parameter]
    public TrakHoundServiceInformation ServiceInformation { get; set; }


    protected override void OnInitialized()
    {
        from = DateTime.Today;
        to = from.AddDays(1);
    }

    private async Task<IEnumerable<string>> GetLogNames()
    {
        var client = Explorer.Instances.GetClient(explorerService.SelectedInstanceId);
        if (client != null)
        {
            var logNames = await client.System.Services.QueryLogNames(ServiceInformation.Id);
            if (selectedLogName == null) selectedLogName = logNames?.FirstOrDefault();
            return logNames;
        }

        return null;
    }

    private async Task<ITrakHoundConsumer<IEnumerable<TrakHoundLogItem>>> SubscribeLogLines()
    {
        var client = Explorer.Instances.GetClient(explorerService.SelectedInstanceId);
        if (client != null)
        {
            return await client.System.Services.SubscribeToLog(ServiceInformation.Id, selectedLogName, selectedLogLevel);
        }

        return null;
    }

    private async Task<IEnumerable<TrakHoundLogItem>> GetLogLines()
    {
        var client = Explorer.Instances.GetClient(explorerService.SelectedInstanceId);
        if (client != null)
        {
            return await client.System.Services.QueryLogsByMinimumLevel(ServiceInformation.Id, selectedLogName, selectedLogLevel, from, to, skip, take, sortOrder);
        }

        return null;
    }

}
